<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>native container on Yet another gamedev blog</title><link>https://dotsplayground.com/tags/native-container/</link><description>Recent content in native container on Yet another gamedev blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 18 Mar 2020 11:02:02 +0100</lastBuildDate><atom:link href="https://dotsplayground.com/tags/native-container/index.xml" rel="self" type="application/rss+xml"/><item><title>Custom Native Container [Part 4]: Parallel Job Using ParallelWriter</title><link>https://dotsplayground.com/2020/03/customnativecontainerpt4/</link><pubDate>Wed, 18 Mar 2020 11:02:02 +0100</pubDate><guid>https://dotsplayground.com/2020/03/customnativecontainerpt4/</guid><description>Introduction In the previous article in this series, Custom Native Container [Part 3]: Parallel Job Using Min Max, we added support for parallel jobs. But these jobs were limited to writing to a single index of the array. In this article we will remove this limitation from our NativeIntArray by adding support for ParallelWriter. The article assumes basic (C#) multithreading knowledge.
The result of the previous article can be found here.</description></item><item><title>Custom Native Container [Part 3]: Parallel Job Using Min Max</title><link>https://dotsplayground.com/2020/03/customnativecontainerpt3/</link><pubDate>Wed, 18 Mar 2020 11:01:02 +0100</pubDate><guid>https://dotsplayground.com/2020/03/customnativecontainerpt3/</guid><description>Introduction In previous parts of this series we looked into how to create a basic custom native container that can be used with jobs. This article will improve our NativeIntArray container to add support for parallel jobs. This is done by using a pattern where the job is split into ranges and each job is only allowed to operate on this range. This limits the array access to the index passed through Execute(int index).</description></item><item><title>Custom Native Container [Part 2]: Deallocate On Job Completion</title><link>https://dotsplayground.com/2020/03/customnativecontainerpt2/</link><pubDate>Wed, 18 Mar 2020 11:00:02 +0100</pubDate><guid>https://dotsplayground.com/2020/03/customnativecontainerpt2/</guid><description>Introduction In the previous article in this series, Custom Native Container [Part 1]: The Basics, we looked into how we can create a bare basic custom native container for usage with the job system. In this article we will extend our NativeIntArray container to add support for usage with .WithDeallocateOnJobCompletion and [DeallocateOnJobCompletion].
The result of the previous article can be found here.
The final result of this article can be found here.</description></item><item><title>Custom Native Container [Part 1]: The Basics</title><link>https://dotsplayground.com/2020/03/customnativecontainerpt1/</link><pubDate>Wed, 18 Mar 2020 10:59:02 +0100</pubDate><guid>https://dotsplayground.com/2020/03/customnativecontainerpt1/</guid><description>Introduction Native containers are used for data communication between jobs. Unity already provides a set of native containers in their Collections package, such as NativeList, NativeQueue, NativeHashMap, etc. But when you need something more custom, you can write your own native container.
In this article we will write such a custom container that can be used with jobs. In subsequent articles we will look into adding more advanced features to this container such as adding support for parallel jobs.</description></item></channel></rss>