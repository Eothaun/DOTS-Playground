<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Yet another gamedev blog</title><link>https://dotsplayground.com/posts/</link><description>Recent content in Posts on Yet another gamedev blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 01 Apr 2020 10:59:02 +0100</lastBuildDate><atom:link href="https://dotsplayground.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How to find more information about a DOTS packages?</title><link>https://dotsplayground.com/2020/04/howtofinddotspackageinformation/</link><pubDate>Wed, 01 Apr 2020 10:59:02 +0100</pubDate><guid>https://dotsplayground.com/2020/04/howtofinddotspackageinformation/</guid><description>Do you want to learn more about DOTS internals? I hope you find your way to this article with the search for answers. I will show you quickly how to find out more about Unity and its internals. This is a great source of inspiration. As a game development student at Breda University of applied sciences, I could apply the gained knowledge from just researching the files besides in my DOTS project also in my C++ project.</description></item><item><title>Custom Native Container [Part 5]: ParallelFor Using ParallelWriter With Thread Index</title><link>https://dotsplayground.com/2020/03/customnativecontainerpt5/</link><pubDate>Wed, 18 Mar 2020 11:03:02 +0100</pubDate><guid>https://dotsplayground.com/2020/03/customnativecontainerpt5/</guid><description>Introduction Previously in this series we looked into creating our own custom native container and adding support for features such as deallocation on job completion and multiple ways to add parallel jobs support. In this part we will look into yet another way to add support for parallel writing using [NativeSetThreadIndex].
This article won&amp;rsquo;t use code from previous articles, but will instead implement a completely new native container. It is therefor assumed that you understand how to do this.</description></item><item><title>Custom Native Container [Part 4]: Parallel Job Using ParallelWriter</title><link>https://dotsplayground.com/2020/03/customnativecontainerpt4/</link><pubDate>Wed, 18 Mar 2020 11:02:02 +0100</pubDate><guid>https://dotsplayground.com/2020/03/customnativecontainerpt4/</guid><description>Introduction In the previous article in this series, Custom Native Container [Part 3]: Parallel Job Using Min Max, we added support for parallel jobs. But these jobs were limited to writing to a single index of the array. In this article we will remove this limitation from our NativeIntArray by adding support for ParallelWriter. The article assumes basic (C#) multithreading knowledge.
The result of the previous article can be found here.</description></item><item><title>Custom Native Container [Part 3]: Parallel Job Using Min Max</title><link>https://dotsplayground.com/2020/03/customnativecontainerpt3/</link><pubDate>Wed, 18 Mar 2020 11:01:02 +0100</pubDate><guid>https://dotsplayground.com/2020/03/customnativecontainerpt3/</guid><description>Introduction In previous parts of this series we looked into how to create a basic custom native container that can be used with jobs. This article will improve our NativeIntArray container to add support for parallel jobs. This is done by using a pattern where the job is split into ranges and each job is only allowed to operate on this range. This limits the array access to the index passed through Execute(int index).</description></item><item><title>Custom Native Container [Part 2]: Deallocate On Job Completion</title><link>https://dotsplayground.com/2020/03/customnativecontainerpt2/</link><pubDate>Wed, 18 Mar 2020 11:00:02 +0100</pubDate><guid>https://dotsplayground.com/2020/03/customnativecontainerpt2/</guid><description>Introduction In the previous article in this series, Custom Native Container [Part 1]: The Basics, we looked into how we can create a bare basic custom native container for usage with the job system. In this article we will extend our NativeIntArray container to add support for usage with .WithDeallocateOnJobCompletion and [DeallocateOnJobCompletion].
The result of the previous article can be found here.
The final result of this article can be found here.</description></item><item><title>Custom Native Container [Part 1]: The Basics</title><link>https://dotsplayground.com/2020/03/customnativecontainerpt1/</link><pubDate>Wed, 18 Mar 2020 10:59:02 +0100</pubDate><guid>https://dotsplayground.com/2020/03/customnativecontainerpt1/</guid><description>Introduction Native containers are used for data communication between jobs. Unity already provides a set of native containers in their Collections package, such as NativeList, NativeQueue, NativeHashMap, etc. But when you need something more custom, you can write your own native container.
In this article we will write such a custom container that can be used with jobs. In subsequent articles we will look into adding more advanced features to this container such as adding support for parallel jobs.</description></item><item><title>Unity DOTS Editor</title><link>https://dotsplayground.com/2020/02/dotseditor/</link><pubDate>Sun, 23 Feb 2020 10:59:02 +0100</pubDate><guid>https://dotsplayground.com/2020/02/dotseditor/</guid><description>Introduction Knowing how the Unity editor can support you while developing with DOTS is important to speed up the workflow and get debugging information. In this post I will go over what editor features are available for DOTS.
To follow along with this post you will needed the following packages.
Entities: Installing this package and its dependencies will add everything needed to develop with DOTS, such as the burst compiler and job system.</description></item><item><title>First Meeting</title><link>https://dotsplayground.com/2020/02/firstmeeting/</link><pubDate>Thu, 20 Feb 2020 14:00:02 +0100</pubDate><guid>https://dotsplayground.com/2020/02/firstmeeting/</guid><description>The first Meeting In our first meeting we defined what a learning community is for us, which model we are using. Besides this we defined our personal goals and the over arching goal. The later is a tower defense game. It is meant to guide us in a direction to give us fuel for our research and prototypes.
The method As method we chose the learning community methodology as the basis for our research.</description></item><item><title>How Entites could interact</title><link>https://dotsplayground.com/2019/11/entityinteraction/</link><pubDate>Thu, 21 Nov 2019 21:45:00 +0100</pubDate><guid>https://dotsplayground.com/2019/11/entityinteraction/</guid><description>How can we implement interaction between entities? Before we can actually answer that question, we should formulate the actual problem.
Summary There are two problems in an ECS when it comes to interaction between entities: read and write access. The truth is that interactions do not really exists, they hide the implementation of the underlaying relationship. A relationship is then nothing else than the transformation of data. (More about)
To reason about the right tool for creating those transformations, we need to reason about our code and ask ourselves the following five questions:</description></item><item><title>Linking entities or entity relationships</title><link>https://dotsplayground.com/2019/11/linkingentities/</link><pubDate>Thu, 21 Nov 2019 14:59:02 +0100</pubDate><guid>https://dotsplayground.com/2019/11/linkingentities/</guid><description>The problem Often in games different objects interact with each other, eg. a button opens a door, a child follows its parent etc. With the new ESC system those hierarchies aren&amp;rsquo;t trivial, hierarchies don&amp;rsquo;t really exist natively. So how do we link entities in a hierarchy?
Linking entities as a group In the new ESC if you translate a GameObject via ConvertToEntity to entities the hierarchy would not be translated into the ESC World.</description></item></channel></rss>